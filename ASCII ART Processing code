PImage img;
String textParagraph = "Allan Sekula and Noël Burch’s The Forgotten Space—A Film Essay Seeking to Understand the Contemporary Maritime World in Relation to the Symbolic Legacy of the Sea (2010) is a film that follows the movement of shipping containers on land and sea; it is a film about global capital and the wreckage it leaves in the wake. The filmmakers “visit displaced farmers and villagers in Holland and Belgium, underpaid truck drivers in Los Angeles, seafarers aboard mega-ships shuttling between Asia and Europe, and factory workers in China,” and finally the Guggenheim Museum in Bilbao, where they “discover the most sophisticated expression of the belief that the maritime economy, and the sea itself, is somehow obsolete";
int imgW = 150;  // Grid width for text density
int imgH;
int textIndex = 0;
PFont font;
float spacing = 5;  // Base text spacing

void setup() {
  size(800, 800);
  background(255);

  font = createFont("Georgia", 10);  // Change font for readability
  textFont(font);
  textSize(10);
  fill(0);  

  img = loadImage("show-photo.jpg");  // Replace with your image
  
  if (img == null) {
    println("Error: Image not found!");
    exit();
  }

  img.filter(GRAY);  
  img.loadPixels();  

  // Resize while keeping aspect ratio
  float aspectRatio = (float) img.height / img.width;
  imgH = int(imgW * aspectRatio);
  img.resize(imgW, imgH);

  // Generate the detailed text image
  generateTextASCII();
}

void generateTextASCII() {
  if (img.pixels == null || img.pixels.length == 0) {
    println("Error: Image pixels not loaded!");
    return;
  }

  int xOffset = 40;
  int yOffset = 40;
  
  textIndex = 0;  

  for (int i = 0; i < imgH; i++) {
    for (int j = 0; j < imgW; j++) {
      if (textIndex >= textParagraph.length()) textIndex = 0;  // Loop text if needed

      int pixelIndex = i * imgW + j;
      if (pixelIndex >= img.pixels.length) continue; 

      float bright = brightness(img.pixels[pixelIndex]);

      // Modify spacing & boldness dynamically based on brightness
      float mappedSize = map(bright, 0, 255, 12, 5);  // Smaller text in darker areas
      float mappedWeight = map(bright, 0, 255, 255, 100);  // Bolder in dark areas

      textSize(mappedSize);
      fill(0, mappedWeight);  // Adjust density with fill

      char asciiChar = textParagraph.charAt(textIndex);
      text(asciiChar, xOffset + j * spacing, yOffset + i * spacing);

      textIndex++;
    }
  }
}
